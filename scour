#!/usr/bin/env python3
import sys
import pickle
import os.path

from lib import Project

'''
Copied usage notes

i.e.

Using scour to build notes on renewable energy generation and storage

scour begin thesis

scour begin generation
scour collect "~renewable energy" ~generation --articles
...
scour end generation

scour sub storage
scour collect ~"renewable energy" ~"energy storage" --articles
...
scour end storage

scour end thesis

'''


def get_method_docs(obj):
    members = [(func, getattr(obj, func)) for func in dir(obj) if callable(getattr(obj, func)) and not func.startswith("__")]
    return [(name, func.__doc__) for name, func in members]

def get_cli_docs():
    methodDocs = get_method_docs(Project)
    subcommands = '    ' + '\n    '.join(name for name, doc in methodDocs)
    format_doc  = lambda doc : '\n        '.join(line for line in doc.split('\n')) if doc is not None else ''
    docs        = '    ' + '\n    '.join('{}:\n        {}'.format(name, format_doc(doc)) for name, doc in methodDocs)
    return subcommands, docs

def main(args):
    subcommands, docs = get_cli_docs()

    if '-h' in args or '--help' in args:
        print('Select a subcommand of scour to run: \n' + docs)
        return 0

    assert len(args) > 0, 'Require at least one argument to run'

    subcommand, *subargs = args

    dirname = os.path.dirname(os.path.realpath(__file__))
    filename = dirname + '/.project.pkl'
    try:
        with open(filename, 'rb') as infile:
            project = pickle.load(infile)
    except FileNotFoundError:
        project = Project()

    if not hasattr(project, subcommand):
        print('Select a subcommand of scour to run: \n' + docs)
        raise AttributeError('Invalid subcommand: {}'.format(subcommand))
    project_command = getattr(project, subcommand)
    project_command(*subargs)

    with open(filename, 'wb') as outfile:
        pickle.dump(project, outfile)

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
